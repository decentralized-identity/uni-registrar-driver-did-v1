/**
 * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.
 */
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const LinkedDataSignature = require('./LinkedDataSignature');
const util = require('../util');

module.exports = class Ed25519Signature2018 extends LinkedDataSignature {
  constructor(injector) {
    let algorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Ed25519Signature2018';

    super(injector, algorithm);
    this.requiredKeyType = 'Ed25519VerificationKey2018';
  }

  createSignatureValue(verifyData, options) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const forge = _this.injector.use('forge');

      // TODO: should abstract JWS signing bits out for reuse elsewhere

      // JWS header
      const header = {
        alg: 'EdDSA',
        b64: false,
        crit: ['b64']
      };

      /*
      +-------+-----------------------------------------------------------+
      | "b64" | JWS Signing Input Formula                                 |
      +-------+-----------------------------------------------------------+
      | true  | ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' ||     |
      |       | BASE64URL(JWS Payload))                                   |
      |       |                                                           |
      | false | ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.') ||    |
      |       | JWS Payload                                               |
      +-------+-----------------------------------------------------------+
      */

      const encodedHeader = util.encodeBase64Url(JSON.stringify(header), { forge });

      let encodedSignature;
      if (_this.injector.env.nodejs) {
        // optimize using node libraries
        const chloride = require('chloride');
        const bs58 = require('bs58');

        // decode private key
        const privateKey = bs58.decode(options.privateKeyBase58);

        // build signing input per above comment
        const tbs = Buffer.concat([new Buffer(encodedHeader + '.', 'utf8'), new Buffer(verifyData.data, verifyData.encoding)]);
        const buffer = chloride.crypto_sign_detached(tbs, privateKey);
        encodedSignature = util.encodeBase64Url(buffer.toString('binary'), { forge });
      } else {
        throw new Error('Not implemented');
        /*
        // browser or other environment
        const privateKey = forge.pki.privateKeyFromPem(options.privateKeyPem);
        const md = forge.md.sha256.create();
        // build signing input per above comment
        md.update(encodedHeader + '.', 'utf8');
        md.update(verifyData.data, verifyData.encoding);
        const binaryString = privateKey.sign(md);
        encodedSignature = util.encodeBase64Url(binaryString, {forge});*/
      }

      // create detached content signature
      return encodedHeader + '..' + encodedSignature;
    })();
  }

  verifyProofNode(verifyData, proof, options) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const forge = _this2.injector.use('forge');

      const publicKeyBase58 = options.publicKey.publicKeyBase58;

      // add payload into detached content signature

      var _proof$jws$split = proof.jws.split('.'),
          _proof$jws$split2 = _slicedToArray(_proof$jws$split, 3);

      const encodedHeader = _proof$jws$split2[0],
            payload = _proof$jws$split2[1],
            encodedSignature = _proof$jws$split2[2];


      const header = JSON.parse(util.decodeBase64Url(encodedHeader, { forge }));
      /*const expectedHeader = {
        alg: 'EdDSA',
        b64: false,
        crit: ['b64']
      };*/
      if (!(header && typeof header === 'object')) {
        throw new Error('Invalid JWS header.');
      }

      // confirm header matches all expectations
      if (!(header.alg === 'EdDSA' && header.b64 === false && Array.isArray(header.crit) && header.crit.length === 1 && header.crit[0] === 'b64') && Object.keys(header).length === 3) {
        throw new Error('Invalid JWS header parameters for Ed25519Signature2018.');
      }

      const rawSignature = util.decodeBase64Url(encodedSignature, { forge });

      if (_this2.injector.env.nodejs) {
        // optimize using node libraries
        const chloride = require('chloride');
        const bs58 = require('bs58');

        // decode public key
        const publicKey = bs58.decode(publicKeyBase58);

        // rebuild signing input per JWS spec
        const tbs = Buffer.concat([new Buffer(encodedHeader + '.', 'utf8'), new Buffer(verifyData.data, verifyData.encoding)]);
        return chloride.crypto_sign_verify_detached(new Buffer(rawSignature, 'binary'), tbs, publicKey);
      }

      throw new Error('Not implemented');
      /*
      // browser or other environment
      const publicKey = forge.pki.publicKeyFromPem(publicKeyPem);
      const md = forge.md.sha256.create();
      // rebuild signing input per JWS spec
      md.update(encodedHeader + '.', 'utf8');
      md.update(verifyData.data, verifyData.encoding);
      return publicKey.verify(md.digest().bytes(), rawSignature);*/
    })();
  }

  validateKey(key, options) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      if (typeof key.publicKeyBase58 !== 'string') {
        throw new TypeError('Unknown public key encoding. Public key encoding must be ' + '"publicKeyBase58".');
      }
      const jsonld = _this3.injector.use('jsonld');
      if (!jsonld.hasValue(key, 'type', _this3.requiredKeyType)) {
        throw new TypeError(`Invalid key type. Key type must be "${_this3.requiredKeyType}".`);
      }
    })();
  }
};